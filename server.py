# -*- coding: utf-8 -*-
"""Server.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/191pdiyml66TlspYsRAnp04MH_K39kDir
"""

!pip install Flask SQLAlchemy Flask-Migrate gradio python-dotenv

import os
from flask import Flask, Blueprint, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
import gradio as gr
from dotenv import load_dotenv

# Load environment variables (optional)
load_dotenv()

# Database configuration using provided PostgreSQL connection string
DATABASE_URL = "postgresql://kusuma:E3Gstn7&CUqMqASi%AX@167.235.195.77:5432/kusuma"

# Set up configuration for Flask app
class Config:
    SQLALCHEMY_DATABASE_URI = DATABASE_URL  # Use provided PostgreSQL connection string
    SQLALCHEMY_TRACK_MODIFICATIONS = False

# Initialize Flask app and configurations
app = Flask(__name__)
app.config.from_object(Config)
db = SQLAlchemy(app)
migrate = Migrate(app, db)

# Define User model with explicit schema specification
class User(db.Model):
    _tablename_ = 'users'
    _table_args_ = {"schema": "public"}
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(100), unique=True, nullable=False)

# Attempt to create database tables if they donâ€™t exist
with app.app_context():
    try:
        db.create_all()
    except Exception as e:
        print(f"Error creating tables: {e}")

# Blueprint for user routes
user_bp = Blueprint('users', __name__)

# Create user endpoint
@user_bp.route('/', methods=['POST'])
def create_user():
    data = request.get_json()
    name = data.get('name')
    email = data.get('email')

    if not name or not email:
        return jsonify({'error': 'Name and email are required'}), 400

    user = User(name=name, email=email)
    db.session.add(user)
    db.session.commit()
    return jsonify({'id': user.id, 'name': user.name, 'email': user.email}), 201

# Get user by ID endpoint
@user_bp.route('/<int:user_id>', methods=['GET'])
def get_user(user_id):
    user = User.query.get(user_id)
    if not user:
        return jsonify({'error': 'User not found'}), 404
    return jsonify({'id': user.id, 'name': user.name, 'email': user.email}), 200

# Edit user by ID endpoint
@user_bp.route('/<int:user_id>', methods=['PUT'])
def edit_user(user_id):
    user = User.query.get(user_id)
    if not user:
        return jsonify({'error': 'User not found'}), 404

    data = request.get_json()
    name = data.get('name')
    email = data.get('email')

    if name:
        user.name = name
    if email:
        user.email = email

    db.session.commit()
    return jsonify({'id': user.id, 'name': user.name, 'email': user.email}), 200

# Delete user by ID endpoint
@user_bp.route('/<int:user_id>', methods=['DELETE'])
def delete_user(user_id):
    user = User.query.get(user_id)
    if not user:
        return jsonify({'error': 'User not found'}), 404
    db.session.delete(user)
    db.session.commit()
    return '', 204

# Register blueprint
app.register_blueprint(user_bp, url_prefix='/users')

# Gradio Functions
def create_user_gradio(name, email):
    with app.app_context():
        user = User(name=name, email=email)
        db.session.add(user)
        db.session.commit()
        return f"User created with ID: {user.id}"

def get_user_gradio(user_id):
    with app.app_context():
        user = User.query.get(user_id)
        if not user:
            return "User not found"
        return f"User ID: {user.id}, Name: {user.name}, Email: {user.email}"

def edit_user_gradio(user_id, name, email):
    with app.app_context():
        user = User.query.get(user_id)
        if not user:
            return "User not found"
        if name:
            user.name = name
        if email:
            user.email = email
        db.session.commit()
        return f"User ID: {user.id}, Updated Name: {user.name}, Updated Email: {user.email}"

def delete_user_gradio(user_id):
    with app.app_context():
        user = User.query.get(user_id)
        if not user:
            return "User not found"
        db.session.delete(user)
        db.session.commit()
        return f"User with ID {user_id} deleted."

# Gradio Interface
with gr.Blocks() as demo:
    gr.Markdown("# User Management API")

    with gr.Tab("Create User"):
        name = gr.Textbox(label="Name")
        email = gr.Textbox(label="Email")
        create_btn = gr.Button("Create User")
        create_output = gr.Textbox(label="Output")
        create_btn.click(create_user_gradio, inputs=[name, email], outputs=create_output)

    with gr.Tab("Get User"):
        user_id_get = gr.Number(label="User ID")
        get_btn = gr.Button("Get User")
        get_output = gr.Textbox(label="Output")
        get_btn.click(get_user_gradio, inputs=user_id_get, outputs=get_output)

    with gr.Tab("Edit User"):
        user_id_edit = gr.Number(label="User ID")
        name_edit = gr.Textbox(label="New Name")
        email_edit = gr.Textbox(label="New Email")
        edit_btn = gr.Button("Edit User")
        edit_output = gr.Textbox(label="Output")
        edit_btn.click(edit_user_gradio, inputs=[user_id_edit, name_edit, email_edit], outputs=edit_output)

    with gr.Tab("Delete User"):
        user_id_delete = gr.Number(label="User ID")
        delete_btn = gr.Button("Delete User")
        delete_output = gr.Textbox(label="Output")
        delete_btn.click(delete_user_gradio, inputs=user_id_delete, outputs=delete_output)

# Launch Gradio interface
demo.launch()

